---
version: 3
vars:
  PROJECT_NAME:
    sh: echo ${PWD##*/}
  BRANCH:
    sh: if [ $(git rev-parse --abbrev-ref HEAD) != "main" ]; then echo $(git rev-parse --abbrev-ref HEAD); else echo main ; fi
  ORGA_NAME: stuttgart-things
  MODULE: github.com/{{ .ORGA_NAME }}/{{ .PROJECT_NAME }}
  DATE:
    sh: date -Ih

tasks:
  lint:
    desc: Lint Golang
    cmds:
      - cmd: golangci-lint run
        ignore_error: true

  test:
    desc: Test code
    cmds:
      - go mod tidy
      - cmd: go test ./... -v

  commit:
    desc: Commit + push code into branch
    cmds:
      - rm -rf dist/
      - git branch --set-upstream-to=origin/{{ .BRANCH }}
      - git pull
      - |
        git add *
        if [[ -n $(git status --porcelain) ]]; then
          echo "ENTER COMMIT MESSAGE"
          read COMMIT_MESSAGE;
          echo "COMMITTING CHANGES"
          git commit --allow-empty -a -m "$(echo ${COMMIT_MESSAGE})"
        else
          echo "NO CHANGES"
        fi
        git push origin -u {{ .BRANCH }}

  branch:
    desc: Create branch from main
    cmds:
      - git checkout main
      - git branch
      - git pull
      - |
        echo "Enter to be created (remote) branch:"
        read BRANCH_NAME;
        git checkout -b ${BRANCH_NAME}
        git push origin ${BRANCH_NAME}
      - git branch
      - git branch --set-upstream-to=origin/main ${BRANCH_NAME}

  pr:
    desc: Create pull request into main
    cmds:
      - task: commit
      - gh pr create -t "{{ .BRANCH }}" -b "{{ .BRANCH }} branch into main"
      - sleep 20s
      - gh pr checks $(gh pr list | grep "^[^#;]" | awk '{print $1}') --watch
      - gh pr merge $(gh pr list | grep "^[^#;]" | awk '{print $1}') --auto --rebase --delete-branch
      - git checkout main && git pull

  tag:
    desc: commit, push & tag the module
    deps: [lint, test, commit]
    cmds:
      - git pull
      - go mod tidy
      - git tag -a {{ .TAG }} -m 'updated for stuttgart-things {{.DATE}} for tag version {{ .TAG }}'
      - git push origin --tags
